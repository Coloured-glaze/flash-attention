# This workflow will upload a Python Package to Release asset
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries


name: Manual build FA 1 wheel package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'branch name or version tag or commit hash: main / v1.0.9 / acdefg'
        default: 'v1.0.9'
        required: true
        type: string
      python_version:
        description: 'python_version: multiple versions separated by ;'
        default: '3.10'
        required: true
        type: string
      torch_version:
        description: 'torch_version: multiple versions separated by ;'
        default: '2.1.2;2.4.0'
        required: true
        type: string
      cuda_version:
        description: 'cuda_version: multiple versions separated by ;'
        default: '11.8.0;12.1.0'
        required: true
        type: string
      exclude_list:
        description: 'exclude_list: multiple versions separated by ;'
        default: 'th=2.1.2,cu=12.1.0;th=2.4.0,cu=11.8.0'
        required: true
        type: string
      os_version:
        description: 'os_version: ubuntu-latest, ubuntu-24.04, ubuntu-20.04'
        default: 'ubuntu-20.04'
        required: true
        type: string
      upload_artifact:
        description: 'upload artifact: 0 or 1'
        default: '0'
        required: true
        type: string

jobs:
  set_ver:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          python <<EOF
          import os, json
          py_version = os.getenv("PYTHON_VERSION").split(";")
          torch_versions = os.getenv("TORCH_VERSION").split(";")
          cuda_versions = os.getenv("CUDA_VERSION").split(";")
          exclude_text = os.getenv("EXCLUDE_TEXT").split(";")
          exclude_list = []; exclude_text_list= []

          def split_text(text):
            result = []
            for pair in text:
                items = pair.split(',')
                if len(items) == 2:
                    temp = [None, None]
                    for item in items:
                        key, value = item.split('=')
                        if key == 'th':
                            temp[0] = value
                        elif key == 'cu':
                            temp[1] = value
                    result.append(temp)
            return result
          exclude_text_list = split_text(exclude_text)

          for py_v in py_version:
              for torch_v in torch_versions:
                  for cuda_v in cuda_versions:
                      if [torch_v, cuda_v] in exclude_text_list:
                          exclude_list.append({
                                  "python_ver": py_v,
                                  "torch_ver": torch_v,
                                  "cuda_ver": cuda_v,
                          })
          matrix = {
              "python_ver" : py_version,
              "torch_ver" : torch_versions,
              "cuda_ver" : cuda_versions,
              "include": [],
              "exclude": exclude_list,
          }
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f"matrix={json.dumps(matrix)}\n")
          print(matrix)
          EOF
        shell: bash
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
          TORCH_VERSION: ${{ inputs.torch_version }}  
          CUDA_VERSION: ${{ inputs.cuda_version }}
          EXCLUDE_TEXT: ${{ inputs.exclude_list }}
        
  wheel:
    name: ${{ inputs.os_version }}-py${{ matrix.python_ver }}-th${{ matrix.torch_ver }}-cu${{ matrix.cuda_ver }}
    needs: set_ver
    runs-on: ${{ inputs.os_version }}

    strategy:
      matrix: ${{ fromJSON(needs.set_ver.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_ver }}
      
      - name: Install CUDA ${{ matrix.cuda_ver }}
        uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_ver }}
          linux-local-args: '["--toolkit"]'
          method: ${{ (matrix.cuda_ver == '11.8.0' || matrix.cuda_ver == '12.1.0') && 'network' || 'local' }}
          # "local" or "network" 

      - name: Format CUDA version
        run: |
          cuda_ver=$(echo ${{ matrix.cuda_ver }} | sed -E 's/([0-9]+)\.([0-9]+)\.[0-9]+/\1\2/g' ) 
          echo "Format CUDA version is ${cuda_ver}"
          echo "cuda_ver=${cuda_ver}" >> $GITHUB_ENV
        shell: bash

      - name: Print CUDA version and path
        run: |
          echo "Installed cuda version is ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V

      - name: Install PyTorch ${{ matrix.torch_ver }}+cu${{ env.cuda_ver }}
        run: |
          pip config set global.index-url https://pypi.org/simple
          pip install setuptools==68.0.0 ninja packaging wheel numpy
          pip install --no-cache-dir torch==${{ matrix.torch_ver }} --index-url https://download.pytorch.org/whl/cu${{ env.cuda_ver }}
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__); print('CUDA:', torch.version.cuda); \
          from torch.utils import cpp_extension; print(cpp_extension.CUDA_HOME)"
        shell: bash

      - name: Build wheel
        run: |
          export FORCE_CUDA="1"
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          export CUDA_INSTALL_DIR=/usr/local/cuda-11.3$CUDA_INSTALL_DIR
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${{ env.cuda_ver }}torch${{ matrix.torch_ver }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${{ github.workspace }}/dist/${wheel_name}" >> $GITHUB_ENV

      - name: Print wheel path
        id: wheel_path
        run: |
          ls -lh dist
          wheel_path=$(find ${{ github.workspace }}/dist/ -name "flash_attn*.whl")
          echo "wheel_path=$wheel_path" >> "$GITHUB_OUTPUT"
          echo "wheel_path: $wheel_path"
          echo "wheel_name: ${{ env.wheel_name }}"
        shell: bash

      - name: Get the date
        id: date
        run: |
          tag=$(date +"%Y-%m-%d-%H-%M")
          echo "Generated release tag: $tag"
          echo "release_tag=${tag}" >> "$GITHUB_OUTPUT"
        # Format date as vYYYY-MM-DD-HH-MM

      - name: Upload artifact
        if: ${{ inputs.upload_artifact == '1' }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{inputs.version}}-${{ github.job }}-${{ steps.date.outputs.release_tag }}_${{ github.run_id }}
          retention-days: 14
          path: |
            ${{ env.wheel_name }}

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{inputs.version}}-${{ steps.date.outputs.release_tag }}
          files: |
            ${{  steps.wheel_path.outputs.wheel_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
