# This workflow will:
# - Create a new Github release
# - Build wheels for supported architectures
# - Deploy the wheels to the Github release
# - Release the static code to PyPi
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Manual build FA 2 wheel package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'branch name or version tag or commit hash: main / v2.6.3 / acdefg'
        default: 'v2.6.3'
        required: true
        type: string
      python_version:
        description: 'python_version: multiple versions separated by ;'
        default: '3.10'
        required: true
        type: string
      torch_version:
        description: 'torch_version: multiple versions separated by ;'
        default: '2.3.1;2.4.1'
        required: true
        type: string
      cuda_version:
        description: 'cuda_version: multiple versions separated by ;'
        default: '12.1.0;12.4.1'
        required: true
        type: string
      cxx11_abi:
        description: 'cxx11_abi: multiple options: TRUE, FALSE, separated by ;'
        default: 'TRUE'
        required: true
        type: string
      exclude_list:
        description: 'exclude_list: multiple versions separated by ;'
        default: 'th=2.3.1,cu=12.4.1;th=2.4.0,cu=11.8.0'
        required: true
        type: string
      os_version:
        description: 'os_version: ubuntu-latest, ubuntu-24.04, ubuntu-20.04'
        default: 'ubuntu-20.04'
        required: true
        type: string
      upload_artifact:
        description: 'upload artifact: 0 or 1'
        default: '0'
        required: true
        type: string
      addl_info:
        description: 'additional information'
        default: ''
        required: false
        type: string
      
jobs:
  set_ver:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          python <<EOF
          import os, json
          py_version = os.getenv("PYTHON_VERSION").split(";")
          torch_versions = os.getenv("TORCH_VERSION").split(";")
          cuda_versions = os.getenv("CUDA_VERSION").split(";")
          cxx11_abi = os.getenv("CXX11_ABI").split(";")
          exclude_text = os.getenv("EXCLUDE_TEXT").split(';')
          exclude_list = []; exclude_text_list= []

          def split_text(text):
              result = []
              for pair in text:
                  items = pair.split(',')
                  if len(items) == 2:
                      temp = [None, None]
                      for item in items:
                          key, value = item.split('=')
                          if key == 'th':
                              temp[0] = value
                          elif key == 'cu':
                              temp[1] = value
                      result.append(temp)
              return result
          exclude_text_list = split_text(exclude_text)

          for py_v in py_version:
              for torch_v in torch_versions:
                  for cuda_v in cuda_versions:
                      for abi in cxx11_abi:
                          if [torch_v, cuda_v] in exclude_text_list:
                              exclude_list.append({
                                      "python_ver": py_v,
                                      "torch_ver": torch_v,
                                      "cuda_ver": cuda_v,
                                      "cxx11_abi": abi
                              })
          matrix = {
              "python_ver" : py_version,
              "torch_ver" : torch_versions,
              "cuda_ver" : cuda_versions,
              "cxx11_abi": cxx11_abi,
              "include": [],
              "exclude": exclude_list,
          }
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f"matrix={json.dumps(matrix)}\n")
          print(matrix)
          EOF
        shell: bash
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
          TORCH_VERSION: ${{ inputs.torch_version }}  
          CUDA_VERSION: ${{ inputs.cuda_version }}
          CXX11_ABI: ${{ inputs.cxx11_abi }}
          EXCLUDE_TEXT: ${{ inputs.exclude_list }}
        
  wheel:
    name: ${{ inputs.os_version }}-py${{ matrix.python_ver }}-th${{ matrix.torch_ver }}-cu${{ matrix.cuda_ver }}
    needs: set_ver
    runs-on: ${{ inputs.os_version }}

    strategy:
      matrix: ${{ fromJSON(needs.set_ver.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ inputs.version }}
          submodules: false

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python_ver }}

      - name: Set CUDA and PyTorch versions
        run: |
          echo "MATRIX_CUDA_VERSION=$(echo ${{ matrix.cuda_ver }} | awk -F \. {'print $1 $2'})" >> $GITHUB_ENV
          echo "MATRIX_TORCH_VERSION=$(echo ${{ matrix.torch_ver }} | awk -F \. {'print $1 "." $2'})" >> $GITHUB_ENV

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        # https://github.com/easimon/maximize-build-space/blob/master/action.yml
        # https://github.com/easimon/maximize-build-space/tree/test-report
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: Set up swap space
        if: runner.os == 'Linux'
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10

      - name: Install CUDA ${{ matrix.cuda_ver }}
        if: ${{ matrix.cuda_ver != 'cpu' }}
        uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_ver }}
          linux-local-args: '["--toolkit"]'
          # default method is "local", and we're hitting some error with caching for CUDA 11.8 and 12.1
          # method: ${{ (matrix.cuda_ver == '11.8.0' || matrix.cuda_ver == '12.1.0') && 'network' || 'local' }}
          method: 'network'
          # We need the cuda libraries (e.g. cuSparse, cuSolver) for compiling PyTorch extensions,
          # not just nvcc
          # sub-packages: '["nvcc"]'

      - name: Install PyTorch ${{ matrix.torch_ver }}+cu${{ matrix.cuda_ver }}
        run: |
          pip install --upgrade pip
          # If we don't install before installing Pytorch, we get error for torch 2.0.1
          # ERROR: Could not find a version that satisfies the requirement setuptools>=40.8.0 (from versions: none)
          pip install lit
          # For some reason torch 2.2.0 on python 3.12 errors saying no setuptools
          pip install setuptools numpy==1.26.4 
          # We want to figure out the CUDA version to download pytorch
          # e.g. we can have system CUDA version being 11.7 but if torch==1.12 then we need to download the wheel from cu116
          # see https://github.com/pytorch/pytorch/blob/main/RELEASE.md#release-compatibility-matrix
          # This code is ugly, maybe there's a better way to do this.
          export TORCH_CUDA_VERSION=$(python -c "from os import environ as env; \
            minv = {'2.0': 117, '2.1': 118, '2.2': 118, '2.3': 118, '2.4': 118}[env['MATRIX_TORCH_VERSION']]; \
            maxv = {'2.0': 118, '2.1': 121, '2.2': 121, '2.3': 124, '2.4': 124}[env['MATRIX_TORCH_VERSION']]; \
            print(max(min(int(env['MATRIX_CUDA_VERSION']), maxv), minv))" \
          )
          if [[ ${{ matrix.torch_ver }} == *"dev"* ]]; then
            pip install --no-cache-dir --pre torch==${{ matrix.torch_ver }} --index-url https://download.pytorch.org/whl/nightly/cu${TORCH_CUDA_VERSION}
          else
            pip install --no-cache-dir torch==${{ matrix.torch_ver }} --index-url https://download.pytorch.org/whl/cu${TORCH_CUDA_VERSION}
          fi
          gcc --version
          nvcc --version
          python --version
          python -c "import torch; from torch.utils import cpp_extension; \
          print('PyTorch:', torch.__version__); \
          print('CUDA:', torch.version.cuda); \
          print('CUDA_HOME:', cpp_extension.CUDA_HOME)"
        shell: bash

      - name: Build wheel
        id: build_wheel
        run: |
          # We want setuptools >= 49.6.0 otherwise we can't compile the extension if system CUDA version is 11.7 and pytorch cuda version is 11.6
          # https://github.com/pytorch/pytorch/blob/664058fa83f1d8eede5d66418abff6e20bd76ca8/torch/utils/cpp_extension.py#L810
          # However this still fails so I'm using a newer version of setuptools
          pip install setuptools==68.0.0
          pip install ninja packaging wheel
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          # Limit MAX_JOBS otherwise the github runner goes OOM
          # CUDA 11.8 can compile with 2 jobs, but CUDA 12.x goes OOM
          MAX_JOBS=$([[ "$MATRIX_CUDA_VERSION" == 12* ]] && echo 1 || echo 2) FLASH_ATTENTION_FORCE_BUILD="TRUE" FLASH_ATTENTION_FORCE_CXX11_ABI=${{ matrix.cxx11_abi}} python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${MATRIX_CUDA_VERSION}torch${MATRIX_TORCH_VERSION}cxx11abi${{ matrix.cxx11_abi }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} dist/${wheel_name}
          echo "wheel_name=${{ github.workspace }}/dist/${wheel_name}" >> $GITHUB_ENV
        shell: bash

      - name: Print wheel path
        id: wheel_path
        run: |
          ls -lh dist
          wheel_path=$(find ${{ github.workspace }}/dist/ -name "*.whl")
          echo "wheel_path=$wheel_path" >> "$GITHUB_OUTPUT"
          echo "wheel_path: $wheel_path"
          echo "wheel_name: ${{ env.wheel_name }}"
        shell: bash

      - name: Upload artifact
        if: ${{ inputs.upload_artifact == '1' }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{inputs.addl_info}}${{inputs.version}}-py${{ matrix.python_ver }}-th${{ matrix.torch_ver }}-cu${{ matrix.cuda_ver }}-${{ github.run_id }}
          retention-days: 14
          path: |
            ${{ steps.build_wheel.outputs.wheel_name }}

      - uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{inputs.addl_info}}${{inputs.version}}-py${{ matrix.python_ver }}-th${{ matrix.torch_ver }}-cu${{  matrix.cuda_ver }}
          files: |
            ${{  steps.wheel_path.outputs.wheel_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
