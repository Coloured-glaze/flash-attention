# This workflow will upload a Python Package to Release asset
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries


name: Manual build FA 1 wheel package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag or commit hash : v1.0.9'
        default: 'v1.0.9'
        required: true
        type: string

jobs:
  wheel:
    name: ${{ matrix.os }} py${{ matrix.python-version }}-pt${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
          os: [ubuntu-20.04]
          python-version: ['3.10']
          torch-version: ['2.1.2', '2.4.0']
          cuda-version: ['11.8.0', '12.1.0']

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install CUDA ${{ matrix.cuda-version }}
        uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda-version }}
          linux-local-args: '["--toolkit"]'
          method: 'network' 
          # "local" or "network" 

      - name: Format CUDA version
        run: |
          cuda_ver=$(echo ${{ matrix.cuda-version }} | sed 's/\.//g' | sed 's/0//g')
          echo "Format CUDA version is ${cuda_ver}"
          echo "cuda_ver=${cuda_ver}" >> $GITHUB_ENV
        shell: bash

      - run: echo "Installed cuda version is ${{steps.cuda-toolkit.outputs.cuda}}"
      - run: echo "Cuda install location ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
      - run: nvcc -V

      - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ env.cuda_ver }}
        run: |
          pip config set global.index-url https://pypi.org/simple
          pip install setuptools==68.0.0 ninja packaging wheel numpy
          pip install --no-cache-dir torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/cu${{ env.cuda_ver }}
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__); print('CUDA:', torch.version.cuda); from torch.utils import cpp_extension; print(cpp_extension.CUDA_HOME)"
        shell: bash

      - name: Build wheel
        run: |
          export FORCE_CUDA="1"
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          export CUDA_INSTALL_DIR=/usr/local/cuda-11.3$CUDA_INSTALL_DIR
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${{ env.cuda_ver }}torch${{ matrix.torch-version }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV
        shell: bash
      
      - name: print wheel name
        run: echo "wheel_name ${{ env.wheel_name }}"
      
      - name: Get the tag version
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_branch.outputs.branch }}-${{inputs.version}}
          files: |
            ${{ env.wheel_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    